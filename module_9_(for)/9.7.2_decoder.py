# Задача 2. Метод бутерброда
# В секретном агентстве Super-Secret-no решили использовать метод
# бутерброда для шифрования переписки своих сотрудников. Сначала
# буквы слова нумеруются в таком порядке: первая буква получает
# номер 1, последняя буква — номер 2, вторая — номер 3,
# предпоследняя — номер 4. И так для всех букв (см. рисунок).
# Затем все буквы записываются в шифр в порядке своих номеров.
#
# Например, слово sandwich зашифруется в shacnidw.
#
#
#
# Анастасия Верхорубова / Skillbox
#
# Программист Super-Secret-no написал программу шифрования и
# уволился. Теперь агенты не могут понять, что они написали друг другу.
#
# Напишите программу-дешифратор, которая расшифровала бы введённые сообщения.
#
# Пример
#          1   3   5   7   8   6   4   2
# Слово: | s | a | n | d | w | i | c | h |
# Шифр:  | s | h | a | c | n | i | d | w |
#
# Введите зашифрованное сообщение: shacnidw.
#
# Расшифрованное сообщение: sandwich.
#
# Чтобы посмотреть решение этой задачи, нажмите на кнопку ниже.

word = input('Введите зашифрованное сообщение: ') #shacnidw
# пепеменная для нечетных чисел. Они будут записываться последовательно
odd_letter = '' # Нечетные 1-s | 3-a | 5-n | 7-d
# переменная для четных чисел. Они будут записываться в обратном порядке
# even_letter = letter + even_letter. Всегда в начало строки
even_letter = '' # Четные 2-h | 4-c | 6-i | 8-w
count = 1

for letter in word:
    if count % 2 != 0:
        odd_letter += letter # 1-s | 3-a | 5-n | 7-d
    else:
        even_letter = letter + even_letter # 8-w | 6-i | 4-c | 2-h
    count += 1
# 1-s | 3-a | 5-n | 7-d + 2-h | 4-c | 6-i | 8-w
decoder = odd_letter + even_letter
print(f'Расшифрованное слово: {decoder}')

#            1   3   5   7   8   6   4   2
# Слово:   | s | a | n | d | w | i | c | h |
# # Шифр:  | s | h | a | c | n | i | d | w |
# Здесь можно увидеть:
#
# чётные буквы — это h, c, i, w;
# нечётные буквы — это s, a, n, d.
# Основываясь на этом, можно построить будущее решение:
#
# Создайте две переменные: одну для букв на чётных местах,
# другую для букв на нечётных местах.
# Во время итерации по строке добавляйте буквы в зависимости
# от их порядка или чётности.
# Чётные буквы добавляйте в обратном порядке.
# Нечётные — в обычном порядке.
# В завершении цикла объедините обе части (чётные и нечётные буквы)
# для получения окончательной расшифровки.