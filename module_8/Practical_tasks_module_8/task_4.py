# Задача 4. Функция
# Перед изучением функций из программирования
# Саша решил освежить знания о функциях математики.
# Помогите Саше написать программу, которая будет
# считать значение функции в каждой точке отрезка с
# нужным шагом, начиная с конца.
#
# Что нужно сделать
# Напишите программу, которая получает на вход начало
# и конец отрезка, а также шаг (отрицательный), а затем
# высчитывает функцию y в каждой точке отрезка и выводит
# на экран ответ с нужным шагом.
# Обратите внимание, что пользователь может ввести
# некорректные значения для диапазона или шага. Вам
# необходимо исправить эти значения таким образом, чтобы
# вывод результата не зависел от ошибочно введённых данных.
#
# Сама функция выглядит так: y = x^3 + 2x^2 - 4x + 1
#
# ‌Пример 1
#
# Введите начало отрезка: −2
# Введите конец отрезка: 2
# Введите шаг: −1
#
# В точке 2 функция равна 9
# В точке 1 функция равна 0
# В точке 0 функция равна 1
# В точке −1 функция равна 6
# В точке −2 функция равна 9
#
# ‌Пример 2 (пользователь ввёл некорректный шаг)
#
# Введите начало отрезка: 14
# Введите конец отрезка: 9
# Введите шаг: 1
#
# В точке 14 функция равна 3081
# В точке 13 функция равна 2484
# В точке 12 функция равна 1969
# В точке 11 функция равна 1530
# В точке 10 функция равна 1161
# В точке 9 функция равна 856
#
#
#
# Что оценивается
# Результат вывода соответствует условию.
# Вывод содержит описание результата (выведенные числа
# сопровождаются текстовым описанием).
# В программе происходит проверка границ перед созданием
# range и, возможно, их разворот, как и изменение знака шага.
# Формат вывода соответствует примеру.

start = int(input('Введите начало отрезка: '))
finish = int(input('Введите конец отрезка: '))
step = int(input('Введите шаг (отрицательный): '))

# если пользователь ошибся при введении start, меняю их местами
if start < finish:
    start, finish = finish, start

# находим модуль числа для того чтобы шаг всегда шел вниз
if step < 0:
    step = -step

# второй способ нахождения модуля
# modul = abs(step)

# цикл от start до finish включительно и шаг вниз
for dot_x in range(start, finish - 1, -step):
    # y = x^3 + 2x^2 - 4x + 1
    finction_y = dot_x**3 + 2 * dot_x**2 - 4*dot_x + 1
    print(f'В точке {dot_x} вункция равна {finction_y}')
